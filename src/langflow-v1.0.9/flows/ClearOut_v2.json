{
    "id": "eefa7fd3-c187-4adb-87fc-48e27eeeb5ac",
    "data": {
        "nodes": [
            {
                "id": "ToolCallingAgent-El0K1",
                "type": "genericNode",
                "position": {
                    "x": 692.687367181758,
                    "y": -72.80684540680687
                },
                "data": {
                    "type": "ToolCallingAgent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "llm",
                                "display_name": "LLM",
                                "advanced": false,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "Memory to use for the agent.",
                                "title_case": false,
                                "type": "other"
                            },
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "tools",
                                "display_name": "Tools",
                                "advanced": false,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from typing import Dict, List, cast\n\nfrom langchain.agents import AgentExecutor, BaseSingleActionAgent\nfrom langchain.agents.tool_calling_agent.base import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ToolCallingAgentComponent(Component):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools. Only models that are compatible with function calling are supported.\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Input text to pass to the agent.\",\n        ),\n        MessageTextInput(\n            name=\"user_prompt\",\n            display_name=\"Prompt\",\n            info=\"This prompt must contain 'input' key.\",\n            value=\"{input}\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"handle_parsing_errors\",\n            display_name=\"Handle Parsing Errors\",\n            info=\"If True, the agent will handle parsing errors. If False, the agent will raise an error.\",\n            advanced=True,\n            value=True,\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            input_types=[\"Data\"],\n            info=\"Memory to use for the agent.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"LLM\",\n            input_types=[\"LanguageModel\"],\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"run_agent\"),\n    ]\n\n    async def run_agent(self) -> Message:\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\n                \"placeholder\",\n                \"{chat_history}\",\n            ),\n            (\"human\", self.user_prompt),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        agent = create_tool_calling_agent(self.llm, self.tools, prompt)\n\n        runnable = AgentExecutor.from_agent_and_tools(\n            agent=cast(BaseSingleActionAgent, agent),\n            tools=self.tools,\n            verbose=True,\n            handle_parsing_errors=self.handle_parsing_errors,\n        )\n        input_dict: dict[str, str | list[Dict[str, str]]] = {\"input\": self.input_value}\n        if hasattr(self, \"memory\") and self.memory:\n            input_dict[\"chat_history\"] = self.convert_chat_history(self.memory)\n        result = await runnable.ainvoke(input_dict)\n\n        if \"output\" not in result:\n            raise ValueError(\"Output key not found in result. Tried 'output'.\")\n\n        results = result[\"output\"]\n        if isinstance(results, list):\n            result_string = \"\\n\".join([r[\"text\"] for r in results if \"text\" in r and r.get(\"type\") == \"text\"])\n        else:\n            result_string = results\n        self.status = result_string\n        return Message(text=result_string)\n\n    def convert_chat_history(self, chat_history: List[Data]) -> List[Dict[str, str]]:\n        messages = []\n        for item in chat_history:\n            role = \"user\" if item.sender == \"User\" else \"assistant\"\n            messages.append({\"role\": role, \"content\": item.text})\n        return messages\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "handle_parsing_errors": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "handle_parsing_errors",
                                "display_name": "Handle Parsing Errors",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If True, the agent will handle parsing errors. If False, the agent will raise an error.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Inputs",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Input text to pass to the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "system_prompt": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "You are a helpful assistant that provides accurate information about the best way to recycle an item. You can ask questions to the users to better understand its needs and its specific location, and you can use the search tool to find further information on the web.",
                                "name": "system_prompt",
                                "display_name": "System Prompt",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "System prompt for the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "user_prompt": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{input}",
                                "name": "user_prompt",
                                "display_name": "Prompt",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "This prompt must contain 'input' key.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Agent that uses tools. Only models that are compatible with function calling are supported.",
                        "icon": "LangChain",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Tool Calling Agent",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "run_agent",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "system_prompt",
                            "input_value",
                            "user_prompt",
                            "handle_parsing_errors",
                            "memory",
                            "tools",
                            "llm"
                        ],
                        "beta": true,
                        "edited": false
                    },
                    "id": "ToolCallingAgent-El0K1"
                },
                "selected": false,
                "width": 384,
                "height": 575,
                "positionAbsolute": {
                    "x": 692.687367181758,
                    "y": -72.80684540680687
                },
                "dragging": false
            },
            {
                "id": "CustomComponent-JPa7X",
                "type": "genericNode",
                "position": {
                    "x": -317.51783884952204,
                    "y": 1199.2301708531381
                },
                "data": {
                    "type": "Tool_DuckDuckGoSearchRun",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "# from langflow.field_typing import Data\nfrom langflow.field_typing import Tool\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, DropdownInput, StrInput, IntInput, Output\nfrom langflow.schema.message import Message\nfrom langchain_community.tools import DuckDuckGoSearchRun\nfrom langchain_community.utilities import DuckDuckGoSearchAPIWrapper\n\n\nclass DuckDuckGo(Component):\n    display_name = \"Tool_DuckDuckGoSearchRun\"\n    description = \"Tool to search with DuckDuckGo.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"Tool_DuckDuckGoSearchRun\"\n\n    inputs = [\n        IntInput(name=\"n_results\", display_name=\"Number of results\", value=1, advanced=True),\n        DropdownInput(name=\"safesearch\", display_name=\"Level of safety\", options=[\"strict\", \"moderate\", \"off\"], value=\"moderate\", advanced=True),\n        DropdownInput(name=\"source\", display_name=\"Source\", options=[\"text\", \"news\"], value=\"text\", advanced=True),\n        DropdownInput(name=\"time\", display_name=\"Time\", options=[\"y\", \"m\", \"w\", \"d\"], value=\"y\", advanced=True),\n        StrInput(name=\"region\", display_name=\"Region\", value=\"wt-wt\", advanced=True)\n    ]\n\n    outputs = [\n        Output(display_name=\"Search Tool\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Tool:\n        api_wrapper_options = {\n            \"backend\":\"api\", # default value\n            \"max_results\": self.n_results,\n            \"region\": self.region,\n            \"safesearch\": self.safesearch,\n            \"source\": self.source,\n            \"time\": self.time\n            \n        }\n        # remove null values\n        api_wrapper_options = {k:v for k,v in api_wrapper_options.items() if v is not None}\n        tool = DuckDuckGoSearchRun(api_wrapper=DuckDuckGoSearchAPIWrapper(**api_wrapper_options))\n        self.status = tool\n        return tool # type: ignore\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "n_results": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1,
                                "name": "n_results",
                                "display_name": "Number of results",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int"
                            },
                            "region": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "wt-wt",
                                "name": "region",
                                "display_name": "Region",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "safesearch": {
                                "trace_as_metadata": true,
                                "options": [
                                    "strict",
                                    "moderate",
                                    "off"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "moderate",
                                "name": "safesearch",
                                "display_name": "Level of safety",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "source": {
                                "trace_as_metadata": true,
                                "options": [
                                    "text",
                                    "news"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "text",
                                "name": "source",
                                "display_name": "Source",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "time": {
                                "trace_as_metadata": true,
                                "options": [
                                    "y",
                                    "m",
                                    "w",
                                    "d"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "y",
                                "name": "time",
                                "display_name": "Time",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Tool to search with DuckDuckGo.",
                        "icon": "custom_components",
                        "base_classes": [
                            "Tool"
                        ],
                        "display_name": "Tool_DuckDuckGoSearchRun",
                        "documentation": "http://docs.langflow.org/components/custom",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Tool"
                                ],
                                "selected": "Tool",
                                "name": "output",
                                "display_name": "Search Tool",
                                "method": "build_output",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "n_results",
                            "safesearch",
                            "source",
                            "time",
                            "region"
                        ],
                        "beta": false,
                        "edited": true
                    },
                    "id": "CustomComponent-JPa7X",
                    "description": "Tool to search with DuckDuckGo.",
                    "display_name": "Tool_DuckDuckGoSearchRun"
                },
                "selected": false,
                "width": 384,
                "height": 219,
                "dragging": false,
                "positionAbsolute": {
                    "x": -317.51783884952204,
                    "y": 1199.2301708531381
                }
            },
            {
                "id": "OpenAIModel-OhGMo",
                "type": "genericNode",
                "position": {
                    "x": 782.1629887089337,
                    "y": 870.1696502102494
                },
                "data": {
                    "type": "OpenAIModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "json_mode": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "json_mode",
                                "display_name": "JSON Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If True, it will output JSON regardless of passing a schema.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "max_tokens": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "max_tokens",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int"
                            },
                            "model_kwargs": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "model_kwargs",
                                "display_name": "Model Kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "dict"
                            },
                            "model_name": {
                                "trace_as_metadata": true,
                                "options": [
                                    "gpt-4o",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-4",
                                    "gpt-3.5-turbo",
                                    "gpt-3.5-turbo-0125"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "gpt-4o",
                                "name": "model_name",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_base": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "https://api.aimlapi.com/",
                                "name": "openai_api_base",
                                "display_name": "OpenAI API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_key": {
                                "load_from_db": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_key",
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "output_schema": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "output_schema",
                                "display_name": "Schema",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "seed": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1,
                                "name": "seed",
                                "display_name": "Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "title_case": false,
                                "type": "int"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "stream",
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "system_message": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "system_message",
                                "display_name": "System Message",
                                "advanced": true,
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str"
                            },
                            "temperature": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0.1,
                                "name": "temperature",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            }
                        },
                        "description": "Generates text using OpenAI LLMs.",
                        "icon": "OpenAI",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "OpenAI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "max_tokens",
                            "model_kwargs",
                            "json_mode",
                            "output_schema",
                            "model_name",
                            "openai_api_base",
                            "openai_api_key",
                            "temperature",
                            "stream",
                            "system_message",
                            "seed"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "OpenAIModel-OhGMo"
                },
                "selected": false,
                "width": 384,
                "height": 623,
                "positionAbsolute": {
                    "x": 782.1629887089337,
                    "y": 870.1696502102494
                },
                "dragging": false
            },
            {
                "id": "ChatOutput-9E6lh",
                "type": "genericNode",
                "position": {
                    "x": 1300.215926396969,
                    "y": 338.9621567020618
                },
                "data": {
                    "type": "ChatOutput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "data_template": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "data_template",
                                "display_name": "Data Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "title_case": false,
                                "type": "str"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Display a chat message in the Playground.",
                        "icon": "ChatOutput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatOutput-9E6lh"
                },
                "selected": false,
                "width": 384,
                "height": 307,
                "positionAbsolute": {
                    "x": 1300.215926396969,
                    "y": 338.9621567020618
                },
                "dragging": false
            },
            {
                "id": "Memory-zhxTs",
                "type": "genericNode",
                "position": {
                    "x": -208.60281723722363,
                    "y": 678.2816558163015
                },
                "data": {
                    "type": "Memory",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "memory",
                                "display_name": "External Memory",
                                "advanced": false,
                                "input_types": [
                                    "BaseChatMessageHistory"
                                ],
                                "dynamic": false,
                                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if sender:\n                expected_type = \"Machine\" if sender == \"Machine\" else \"User\"\n                stored = [m for m in stored if m.type == expected_type]\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "n_messages": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 100,
                                "name": "n_messages",
                                "display_name": "Number of Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of messages to retrieve.",
                                "title_case": false,
                                "type": "int"
                            },
                            "order": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Ascending",
                                    "Descending"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Ascending",
                                "name": "order",
                                "display_name": "Order",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Order of the messages.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User",
                                    "Machine and User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine and User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID of the chat history.",
                                "title_case": false,
                                "type": "str"
                            },
                            "template": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{sender_name}: {text}",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                        "icon": "message-square-more",
                        "base_classes": [
                            "BaseChatMemory",
                            "Data",
                            "Message"
                        ],
                        "display_name": "Chat Memory",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "messages",
                                "display_name": "Messages (Data)",
                                "method": "retrieve_messages",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "messages_text",
                                "display_name": "Messages (Text)",
                                "method": "retrieve_messages_as_text",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "BaseChatMemory"
                                ],
                                "selected": "BaseChatMemory",
                                "name": "lc_memory",
                                "display_name": "Memory",
                                "method": "build_lc_memory",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "memory",
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "Memory-zhxTs",
                    "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                    "display_name": "Chat Memory"
                },
                "selected": false,
                "width": 384,
                "height": 387,
                "positionAbsolute": {
                    "x": -208.60281723722363,
                    "y": 678.2816558163015
                },
                "dragging": false
            },
            {
                "id": "FileUploadComponent-toy2k",
                "type": "genericNode",
                "position": {
                    "x": -941.598822605363,
                    "y": -255.67055776512552
                },
                "data": {
                    "type": "FileUploadComponent",
                    "node": {
                        "template": {
                            "_type": "CustomComponent",
                            "AIMLApiKey": {
                                "type": "str",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": true,
                                "name": "AIMLApiKey",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": ""
                            },
                            "MaxTokens": {
                                "type": "int",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "MaxTokens",
                                "display_name": "MaxTokens",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "value": "300"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow import CustomComponent\nfrom langflow.field_typing import Data\n\nfrom langflow import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\nimport requests\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n    \ninstall(\"openai\")\n\nclass FileUploadComponent(CustomComponent):\n    display_name = \"AIMLApi GPT-Vision\"\n    description = \"This component process an image with a prompt by the user to produce info about the input image.\"\n    #import assemblyai as aai\n    \n    def build_config(self):\n        return {\n            \"uploaded_file\": {\n                \"display_name\": \"File\",\n                #\"suffixes\": ['.jpg', '.png', '.jpeg'],\n                #'field_type': 'file', \n                #'file_types': ['jpg', 'png', 'jpeg'],\n                'required': False\n            },\n            #\"uploaded_file_base64\": {\n            #    \"display_name\": \"File Base64\",\n                #\"suffixes\": ['.jpg', '.png', '.jpeg'],\n                #'field_type': 'file', \n                #'file_types': ['jpg', 'png', 'jpeg'],\n            #    'required': False\n            #},\n            \"model\": {\n                \"display_name\": \"model\",\n                #\"advanced\": False,\n                \"required\": True,\n                #\"options\": [\n                #    \"gpt-4o\",\n                #],\n            },\n            \"MaxTokens\": {\n                \"display_name\": \"MaxTokens\",\n                \"advanced\": False,\n                \"required\": True,\n                \"default\": 300,\n            },\n            \"AIMLApiKey\":{\n                \"password\": True\n            }\n        }\n    \n    def build(self, uploaded_file: str, model: str, prompt: str, AIMLApiKey: str, MaxTokens: int) -> str:\n        from openai import OpenAI\n        client = OpenAI(\n            api_key=AIMLApiKey\n        )\n\n        #with open(uploaded_file, 'rb') as file:\n        #    file_contents = file.read()\n        #b64_contents = base64.b64encode(file_contents).decode('utf-8')\n        \n        \n        headers = {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": f\"Bearer {AIMLApiKey}\"\n        }\n\n        \n        #if uploaded_file_base64:\n        #    image_url= f\"data:image/jpeg;base64,{uploaded_file_base64}\"\n        #else:\n        #    image_url = f\"\"\"{uploaded_file}\"\"\"\n            \n        payload = {\n        \"model\": model,\n        \"messages\": [\n            {\n              \"role\": \"user\",\n              \"content\": [\n                {\n                  \"type\": \"text\",\n                  \"text\": prompt\n                },\n                {\n                  \"type\": \"image_url\",\n                  \"image_url\": {\n                    #\"url\": f\"data:image/jpeg;base64,{uploaded_file_base64}\"\n                    \"url\": f\"\"\"{uploaded_file}\"\"\"\n                  }\n                }\n              ]\n            }\n          ],\n          \"max_tokens\": MaxTokens\n        }\n\n        response = requests.post(\"https://api.aimlapi.com/chat/completions\", headers=headers, json=payload)\n        content = response.json()['choices'][0]['message']['content']\n        return str(content)",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "model": {
                                "type": "str",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "model",
                                "display_name": "model",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": "gpt-4o"
                            },
                            "prompt": {
                                "type": "str",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "prompt",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": "Name the items in the image"
                            },
                            "uploaded_file": {
                                "type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "uploaded_file",
                                "display_name": "File",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": "https://m.media-amazon.com/images/I/71yt+7dZSPL._AC_UF894,1000_QL80_.jpg"
                            }
                        },
                        "description": "This component process an image with a prompt by the user to produce info about the input image.",
                        "base_classes": [
                            "object",
                            "str",
                            "Text"
                        ],
                        "display_name": "GPT-Vision Input Analyser",
                        "documentation": "",
                        "custom_fields": {
                            "uploaded_file": null,
                            "model": null,
                            "prompt": null,
                            "AIMLApiKey": null,
                            "MaxTokens": null
                        },
                        "output_types": [
                            "Text"
                        ],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Text"
                                ],
                                "selected": "Text",
                                "name": "text",
                                "hidden": null,
                                "display_name": "Text",
                                "method": null,
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [],
                        "beta": false,
                        "edited": true,
                        "official": false
                    },
                    "id": "FileUploadComponent-toy2k"
                },
                "selected": false,
                "width": 384,
                "height": 733,
                "dragging": false,
                "positionAbsolute": {
                    "x": -941.598822605363,
                    "y": -255.67055776512552
                }
            },
            {
                "id": "ChatInput-rPMyv",
                "type": "genericNode",
                "position": {
                    "x": -821.3545340842976,
                    "y": 546.6718112569436
                },
                "data": {
                    "type": "ChatInput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "trace_as_metadata": true,
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "files",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Hi agent, can you help me dispose this item?",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "store_message",
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatInput-rPMyv"
                },
                "selected": false,
                "width": 384,
                "height": 309,
                "positionAbsolute": {
                    "x": -821.3545340842976,
                    "y": 546.6718112569436
                },
                "dragging": false
            },
            {
                "id": "Prompt-dfnst",
                "type": "genericNode",
                "position": {
                    "x": 99.42022322084858,
                    "y": -166.55800969677438
                },
                "data": {
                    "type": "Prompt",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "template": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Item: {item}\n\nUser: {user_message}\nAI: ",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "prompt"
                            },
                            "item": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "item",
                                "display_name": "item",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            },
                            "user_message": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "user_message",
                                "display_name": "user_message",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                            "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                            "template": [
                                "item",
                                "user_message"
                            ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "prompt",
                                "hidden": null,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false
                    },
                    "id": "Prompt-dfnst",
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt"
                },
                "selected": false,
                "width": 384,
                "height": 517,
                "dragging": false,
                "positionAbsolute": {
                    "x": 99.42022322084858,
                    "y": -166.55800969677438
                }
            },
            {
                "id": "StoreMessage-ZYDQm",
                "type": "genericNode",
                "position": {
                    "x": 1840.7921528243435,
                    "y": 601.2248369788194
                },
                "data": {
                    "type": "StoreMessage",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "memory",
                                "display_name": "External Memory",
                                "advanced": false,
                                "input_types": [
                                    "BaseChatMessageHistory"
                                ],
                                "dynamic": false,
                                "info": "The external memory to store the message. If empty, it will use the Langflow tables.",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.inputs import MessageInput, StrInput, HandleInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.memory import get_messages, store_message\n\n\nclass StoreMessageComponent(Component):\n    display_name = \"Store Message\"\n    description = \"Stores a chat message or text into Langflow tables or an external memory.\"\n    icon = \"save\"\n    name = \"StoreMessage\"\n\n    inputs = [\n        MessageInput(name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"The external memory to store the message. If empty, it will use the Langflow tables.\",\n        ),\n        StrInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message.\",\n            value=\"AI\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"The name of the sender.\", value=\"AI\", advanced=True\n        ),\n        StrInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat.\",\n            value=\"\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\"),\n    ]\n\n    def store_message(self) -> Message:\n        message = self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender\n        message.sender_name = self.sender_name or message.sender_name\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = message.session_id\n            lc_message = message.to_lc_message()\n            self.memory.add_messages([lc_message])\n            stored = self.memory.messages\n            stored = [Message.from_lc_message(m) for m in stored]\n            if message.sender:\n                stored = [m for m in stored if m.sender == message.sender]\n        else:\n            store_message(message, flow_id=self.graph.flow_id)\n            stored = get_messages(session_id=message.session_id, sender_name=message.sender_name, sender=message.sender)\n        self.status = stored\n        return stored\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "message": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "message",
                                "display_name": "Message",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The chat message to be stored.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender",
                                "display_name": "Sender",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The sender of the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The session ID of the chat.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Stores a chat message or text into Langflow tables or an external memory.",
                        "icon": "save",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Store Message",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "stored_messages",
                                "display_name": "Stored Messages",
                                "method": "store_message",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "message",
                            "memory",
                            "sender",
                            "sender_name",
                            "session_id"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "StoreMessage-ZYDQm"
                },
                "selected": true,
                "width": 384,
                "height": 471,
                "positionAbsolute": {
                    "x": 1840.7921528243435,
                    "y": 601.2248369788194
                },
                "dragging": true
            }
        ],
        "edges": [
            {
                "source": "CustomComponent-JPa7X",
                "sourceHandle": "{œdataTypeœ:œTool_DuckDuckGoSearchRunœ,œidœ:œCustomComponent-JPa7Xœ,œnameœ:œoutputœ,œoutput_typesœ:[œToolœ]}",
                "target": "ToolCallingAgent-El0K1",
                "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "tools",
                        "id": "ToolCallingAgent-El0K1",
                        "inputTypes": [
                            "Tool"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "Tool_DuckDuckGoSearchRun",
                        "id": "CustomComponent-JPa7X",
                        "name": "output",
                        "output_types": [
                            "Tool"
                        ]
                    }
                },
                "id": "reactflow__edge-CustomComponent-JPa7X{œdataTypeœ:œTool_DuckDuckGoSearchRunœ,œidœ:œCustomComponent-JPa7Xœ,œnameœ:œoutputœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-El0K1{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "OpenAIModel-OhGMo",
                "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-OhGMoœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
                "target": "ToolCallingAgent-El0K1",
                "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "llm",
                        "id": "ToolCallingAgent-El0K1",
                        "inputTypes": [
                            "LanguageModel"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-OhGMo",
                        "name": "model_output",
                        "output_types": [
                            "LanguageModel"
                        ]
                    }
                },
                "id": "reactflow__edge-OpenAIModel-OhGMo{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-OhGMoœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-El0K1{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "FileUploadComponent-toy2k",
                "sourceHandle": "{œdataTypeœ:œFileUploadComponentœ,œidœ:œFileUploadComponent-toy2kœ,œnameœ:œtextœ,œoutput_typesœ:[œTextœ]}",
                "target": "Prompt-dfnst",
                "targetHandle": "{œfieldNameœ:œitemœ,œidœ:œPrompt-dfnstœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "item",
                        "id": "Prompt-dfnst",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "FileUploadComponent",
                        "id": "FileUploadComponent-toy2k",
                        "name": "text",
                        "output_types": [
                            "Text"
                        ]
                    }
                },
                "id": "reactflow__edge-FileUploadComponent-toy2k{œdataTypeœ:œFileUploadComponentœ,œidœ:œFileUploadComponent-toy2kœ,œnameœ:œtextœ,œoutput_typesœ:[œTextœ]}-Prompt-dfnst{œfieldNameœ:œitemœ,œidœ:œPrompt-dfnstœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "Prompt-dfnst",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-dfnstœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ToolCallingAgent-El0K1",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ToolCallingAgent-El0K1",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-dfnst",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-dfnst{œdataTypeœ:œPromptœ,œidœ:œPrompt-dfnstœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-El0K1{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "ChatInput-rPMyv",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rPMyvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-dfnst",
                "targetHandle": "{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-dfnstœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "user_message",
                        "id": "Prompt-dfnst",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-rPMyv",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-rPMyv{œdataTypeœ:œChatInputœ,œidœ:œChatInput-rPMyvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-dfnst{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-dfnstœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "Memory-zhxTs",
                "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-zhxTsœ,œnameœ:œmessagesœ,œoutput_typesœ:[œDataœ]}",
                "target": "ToolCallingAgent-El0K1",
                "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "memory",
                        "id": "ToolCallingAgent-El0K1",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-zhxTs",
                        "name": "messages",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-Memory-zhxTs{œdataTypeœ:œMemoryœ,œidœ:œMemory-zhxTsœ,œnameœ:œmessagesœ,œoutput_typesœ:[œDataœ]}-ToolCallingAgent-El0K1{œfieldNameœ:œmemoryœ,œidœ:œToolCallingAgent-El0K1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "ToolCallingAgent-El0K1",
                "sourceHandle": "{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-El0K1œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-9E6lh",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-9E6lhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-9E6lh",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ToolCallingAgent",
                        "id": "ToolCallingAgent-El0K1",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ToolCallingAgent-El0K1{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-El0K1œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-9E6lh{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-9E6lhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "ChatOutput-9E6lh",
                "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-9E6lhœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "StoreMessage-ZYDQm",
                "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-ZYDQmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "message",
                        "id": "StoreMessage-ZYDQm",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatOutput",
                        "id": "ChatOutput-9E6lh",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatOutput-9E6lh{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-9E6lhœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-StoreMessage-ZYDQm{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-ZYDQmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            }
        ],
        "viewport": {
            "x": 530.7126150345119,
            "y": 382.3343469792851,
            "zoom": 0.3685673043227755
        }
    },
    "description": "Recycling helper agent with vision capabilities and DuckDuckGo search tool",
    "name": "ClearOut_v2",
    "last_tested_version": "1.0.9",
    "endpoint_name": null,
    "is_component": false
}